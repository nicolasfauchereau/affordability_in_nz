import stdlib

//geoDataFile = 'data/Auckland_City_AUs_2006_small_with_rents.geojson'
geoDataFile = 'data/auckland_aus_2013.geojson'
rentDataFile = 'data/mean_rents_by_nbedrooms_by_au.json'
modeDataFile = 'data/distance_and_time_matrix.json'

def numToDollarStr(x, inverse=False):
    // Given a float `x`, round it to the nearest integer,
    // convert it into a string with commas as
    // thousands separators and prepend a dollar sign.
    // If `inverse` is True, then assume `x` has the output format
    // mentioned above, and convert it back to an integer.
    if not inverse:
        if x is None:
            return 'n/a'
        dollars = x.toFixed(0)
        // Insert separating commas
        dollars = dollars.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        return '$' + dollars 
    else:
        if x == 'n/a':
            return None
        return int(x.replace('$', '').replace(',',''))

// Get data and then make map
rentByNbedroomsByAu = None
MIndexByAu = None
M = None
aus = None

$.getJSON(rentDataFile, def(data):
    nonlocal rentByNbedroomsByAu
    rentByNbedroomsByAu = data
)

$.getJSON(modeDataFile, def(data):
    nonlocal MIndexByAu
    nonlocal M
    MIndexByAu = data['index_by_name']
    M = data['matrix']
)

$.getJSON(geoDataFile, def(data):
    nonlocal aus
    aus = data    
    makeMap()
)

def makeMap():    
    // Make sidebar
    // Add an income slider widget
    MEDIAN_ANNUAL_INCOME = 52*882
    $(def():
        $( "#income-slider" ).slider({
            'orientation': 'horizontal',
            'range': 'min',
            'min': 100,
            'max': 100000,
            'value': MEDIAN_ANNUAL_INCOME,
            'step': 100,
            'slide': def(event, ui): 
                // Update income display
                $('#income').val(numToDollarStr(ui.value))
            ,
            'stop': def(event, ui):
                // Recolor aus
                aus.setStyle(style)
        })
        // Initialize slider 
        sv = $('#income-slider')
        $('#income').val(numToDollarStr(sv.slider('value')))
        // Label the median annual income point on slider
        min = sv.slider( "option", "min" )
        range = sv.slider( "option", "max" ) - min
        el = $('<label>&#9650;</label><br>').css('left', 
            (MEDIAN_ANNUAL_INCOME/range*100) +'%')
        $("#income-slider").append(el)
    )

    // Add a number-of-bedrooms selector widget
    $(def():
        $("#num-bedrooms").selectable({
            'selected': def(event, ui):
                // Update nuber of bedrooms
                $('#num-bedrooms').val(ui.selected.id)
                // Recolor aus
                aus.setStyle(style)
        })
    )
    // Initialize selector
    item = $('#num-bedrooms li:eq(1)')
    item.addClass('ui-selected')
    $('#num-bedrooms').val(item[0].id)
 
    // // Add a number-of-bedrooms-to-rent selector widget
    // $(def():
    //     $("#num-bedrooms-rent").selectable({
    //         'selected': def(event, ui):
    //             // Update nuber of bedrooms
    //             $('#num-bedrooms-rent').val(ui.selected.id)
    //             // Recolor aus
    //             aus.setStyle(style)
    //     })
    // )
    // // Initialize selector
    // item = $('#num-bedrooms-rent li:eq(0)')
    // item.addClass('ui-selected')
    // $('#num-bedrooms-rent').val(item[0].id)

    COMMUTE_COST_PER_KM_PER_MODE = {'walk': 0, 'bicycle': 0, 'car': 0.274, 
      'bus': 0.218}
    // Add a mode mode selector widget
    $(def():
        $("#mode").selectable({
            'selected': def(event, ui):
                // Update nuber of bedrooms
                $('#mode').val(ui.selected.id)
                // Recolor aus
                aus.setStyle(style)
        })
    )
    // Initialize selector
    item = $('#mode li:eq(1)')
    item.addClass('ui-selected')
    $('#mode').val(item[0].id)

    WEEKLY_CAR_OWN_COST = 2228/52
    // Add a number-of-cars select widget
    $(def():
        $("#num-cars").selectable({
            'selected': def(event, ui):
                // Update nuber of bedrooms
                $('#num-cars').val(ui.selected.id)
                // Recolor aus
                aus.setStyle(style)
        })
    )
    // Initialize selector
    item = $('#num-cars li:eq(0)')
    item.addClass('ui-selected')
    $('#num-cars').val(item[0].id)


    // Add a parking cost slider widget
    PARKING_DEFAULT = 0
    $(def():
        $( "#parking-cost-slider" ).slider({
            'orientation': 'horizontal',
            'range': 'min',
            'min': 0,
            'max': 30,
            'value': PARKING_DEFAULT,
            'step': 1,
            'slide': def(event, ui): 
                // Update income display
                $('#parking').val(numToDollarStr(ui.value))
            ,
            'stop': def(event, ui):
                // Recolor aus
                aus.setStyle(style)
        })
        // Initialize slider 
        sv = $('#parking-cost-slider')
        $('#parking').val(numToDollarStr(sv.slider('value')))
        // Label the median annual income point on slider
        min = sv.slider( "option", "min" )
        range = sv.slider( "option", "max" ) - min
    )


    // Create map 
    clon = 174.739869
    clat = -36.840417
    map = L.map('map', {
        'center': [clat, clon],
        'zoom': 10,
        'minZoom': 8,
        'maxZoom': 13,
        'maxBounds': [[clat - 0.8 , clon - 0.8], [clat + 0.8, clon + 1.1]],
    })

    // Get tiles from Github
    tilesURL = 'http://{s}.tiles.mapbox.com/v3/github.map-xgq2svrz/{z}/{x}/{y}.png'
    //L.tileLayer(tilesURL).addTo(map)
    
    // Remove 'Leaflet' link from corner of map  
    map.attributionControl.setPrefix('')

    // Define data bins and labels.
    // Assume no-data entries map to nonpositive.
    BINS = [0, 0.25, 0.5, 0.75, 10e9]
    LABELS = ['n/a', '0&ndash;25%', '26&ndash;50%', '51&ndash;75%', '76%+']
    // Define color scheme using http://colorbrewer2.org/js/. 
    // Order colors least-to-most intense, but begin with gray, 
    // the no-data color.
    // 4-class Spectral:
    OPACITY = 0.8
    COLORS_RGB = reversed([[215, 25, 28], [253, 174, 97], [171, 221, 164], 
      [43, 131, 186], [200, 200, 200]])
    COLORS = []
    for c in COLORS_RGB:
        c.append(OPACITY)
        hex = rgbaToHex(c)
        COLORS.append(hex) 

    def rgbaToHex(s):
        s, a = s[:-1], s[-1]
        result = '#'
        for x in s:
            result += Math.round(a*x + 255*(1 - a)).toString(16)
        return result

    // 5-class Spectral:
    // COLORS = reversed(['#d7191c', '#fdae61', '#ffffbf', '#abdda4', '#2b83ba',
    // 'gray'])

    // Add a legend to the map
    legend = L.control({position: 'bottomright'});
    legend.onAdd = def(map):
        div = L.DomUtil.create('div', 'legend')
        div.innerHTML = 'Cost as fraction of income<br/>'
        for i in range(len(LABELS)):
            div.innerHTML += '<span style="background:' + getColor(BINS[i]) +\
              '">' + LABELS[i] + '</span>'
        return div
    
    legend.addTo(map)


    workMarker = L.marker([-36.69925, 175.07263], {
        'draggable': True,
        'icon': L.mapbox.marker.icon({
            'marker-color': COLORS[-1],
        })
    }).addTo(map)
    workMarker.bindPopup('Move this marker to where you work')
    workMarker.on('dragend', def(e):
        setWorkPopup(this)
        // Recolor aus
        aus.setStyle(style)
    )

    def getWorkAuName(marker):
        latLon = marker.getLatLng()
        try:
            layer = leafletPip.pointInLayer(latLon, aus, True)[0]
        except:
            //console.log('aus still undefined')
            return None
        if layer:
            auName = layer.feature.properties.AU_NAME
        else:
            auName = None
        return auName

    def setWorkPopup(marker):
        auName = getWorkAuName(marker)
        text = '<h4>Work</h4>'
        if auName:
            text += auName
        else:
            text += 'Undefined'
        marker.setPopupContent(text)
        marker.openPopup()

    // Add features/aus to map
    nonlocal aus
    aus = L.geoJson(aus, {
        'style': style,
        'onEachFeature': onEachFeature
    }).addTo(map)

    // Feature style functions
    def getColor(x):
        for (i, grade) in enumerate(BINS):
            if x <= grade:
                return COLORS[i]
        return COLORS[0]
    
    def style(feature):
        c = getColor(getWeeklyTotalCostFraction(feature))
        return {
          'fillColor': c,
          'fillOpacity': 1,
          'color': 'white',
          'weight': 1,
          'opacity': 1,
        }

    // Define suburb mouseover etc.
    def highlightFeature(e):
        layer = e.target
        feature = layer.feature
        layer.setStyle({
          'color': 'black',
        })
        if not L.Browser.ie and not L.Browser.opera:
            layer.bringToFront()
        if getWeeklyTotalCostFraction(feature) is None:
            wtcf = 'n/a'
        else:
            wtcf = (getWeeklyTotalCostFraction(feature)*100).toFixed(0) + '%'
        wcc, wct = getWeeklyCommuteCostAndTime(feature)
        popupContent = '<h4>' + feature.properties.AU_NAME + '</h4>' +\
            '<table>' +\
            '<tr><td>Rent per bedroom per week</td><td>' +\
            numToDollarStr(getWeeklyRent(feature), False) + '</td></tr>' +\
            '<tr><td>Commute cost per week</td><td>' +\
            numToDollarStr(wcc, False) + '</td></tr>' +\
            '<tr><td>Commute time per week</td><td>' +\
            wct.toFixed(1) + ' h </td></tr>' +\
            '<tr><td>Car cost per week</td><td>' +\
            numToDollarStr(getWeeklyCarOwnCost(), False) + '</td></tr>' +\
            '<tr><td>Parking cost per week</td><td>' +\
            numToDollarStr(getWeeklyParkingCost(), False) +\
            '</td></tr>' +\
            '<tr><td>Total cost per week</td><td>' +\
            numToDollarStr(getWeeklyTotalCost(feature), False) +\
            '</td></tr>' +\
            '<tr><td>Fraction of income per week</td><td>' +\
            wtcf +\
            '</td></tr>' +\
            '</table>'
        layer.bindPopup(popupContent, {
            'offset': L.point(0, 200),
            'closeButton': False,
        }).openPopup()

    def resetHighlight(e):
        layer = e.target
        aus.resetStyle(layer)
        layer._map.closePopup()
            
    def zoomToFeature(e):
        map.fitBounds(e.target.getBounds())
    
    def onEachFeature(feature, layer):
        layer.on({
            'mouseover': highlightFeature,
            'mouseout': resetHighlight,
            'click': zoomToFeature,
        })

    // Accounting functions

    def getWeeklyIncome():
        income = $('#income').val() // Formatted string
        return numToDollarStr(income, True)/52

    def getWeeklyRent(feature):
        // Return the weekly rent for this au/feature based on
        // the currently selected property type and number of bedrooms.
        // If the given feature has undefined rent,
        // then return None. 
        numBedrooms = $('#num-bedrooms').val()
        numBedroomsRent = $('#num-bedrooms-rent').val()
        auName = feature.properties.AU_NAME 
        if rentByNbedroomsByAu[auName] == 'NA':
            rent = None
        else:
            rent = float(rentByNbedroomsByAu[auName][numBedrooms])
            rent /= int(numBedrooms)
            // if numBedrooms == "5+":
            //     numBedrooms = 5
        return rent

    def getWeeklyCommuteCostAndTime(feature):
        mode = $('#mode').val() 
        // Get commute distance and time from this feature to work
        auName = feature.properties.AU_NAME
        i = MIndexByAu[auName]
        workAuName = getWorkAuName(workMarker)
        if workAuName is None:
            return 0, 0
        j = MIndexByAu[workAuName]
        distance, time = M[mode][i][j]
        // Get weekly cost of mode
        cost = distance*10*COMMUTE_COST_PER_KM_PER_MODE[mode]
        return cost, time*10

    def getWeeklyCarOwnCost():
        numCars = int($('#num-cars').val())
        return numCars*WEEKLY_CAR_OWN_COST

    def getWeeklyParkingCost():
        parking = $('#parking').val() // Formatted string
        return numToDollarStr(parking, True)*5

    def getWeeklyTotalCost(feature):
        // Return the total cost for living in this au/feature
        rent = getWeeklyRent(feature)
        if rent is not None:
            total = rent +\
              getWeeklyCommuteCostAndTime(feature)[0] +\
              getWeeklyCarOwnCost() +\
              getWeeklyParkingCost()                
        else:
            total = None
        return total

    def getWeeklyTotalCostFraction(feature):
        total = getWeeklyTotalCost(feature)
        if total is not None:
            fraction = total/getWeeklyIncome()
        else:
            fraction = None
        return fraction 

