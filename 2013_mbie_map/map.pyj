import stdlib

//geoDataFile = 'data/Auckland_City_AUs_2006_small_with_rents.geojson'
geoDataFile = 'data/Auckland_AUs_2013.geojson'
rentDataFile = 'data/mean_rents_by_nbedrooms_by_au.json'

def makeMap():    
    // Create map 
    clon = 174.739869
    clat = -36.840417
    map = L.map('map', {
        'center': [clat, clon],
        'zoom': 10,
        'minZoom': 8,
        'maxZoom': 13,
        'maxBounds': [[clat - 0.8 , clon - 0.8], [clat + 0.8, clon + 1.1]],
    })

    // Get tiles from Github
    tilesURL = 'http://{s}.tiles.mapbox.com/v3/github.map-xgq2svrz/{z}/{x}/{y}.png'
    //L.tileLayer(tilesURL).addTo(map)
    
    // Remove 'Leaflet' link from corner of map  
    map.attributionControl.setPrefix('')
    
    // Get data
    aus = None
    rentByNbedroomsByAu = None

    $.getJSON(rentDataFile, def(data):
        nonlocal rentByNbedroomsByAu
        rentByNbedroomsByAu = data
    )

    $.getJSON(geoDataFile, def(collection):
        nonlocal aus
        aus = L.geoJson(collection, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map)    
    )

    // Define data bins and labels.
    // Assume no-data entries map to nonpositive.
    BINS = [0, 0.25, 0.5, 0.75, 10e9]
    LABELS = ['n/a', '0&ndash;25%', '26&ndash;50%', '51&ndash;75%', '76%+']
    // Define color scheme using http://colorbrewer2.org/js/. 
    // Order colors least-to-most intense, but begin with gray, 
    // the no-data color.
    // 4-class Spectral:
    COLORS = reversed(['#d7191c', '#fdae61', '#abdda4', '#2b83ba', '#ccc'])
    // 5-class Spectral:
    // COLORS = reversed(['#d7191c', '#fdae61', '#ffffbf', '#abdda4', '#2b83ba',
    // 'gray'])
    MEDIAN_ANNUAL_INCOME = 882*52


    // Add a legend to the map
    legend = L.control({position: 'bottomright'});
    legend.onAdd = def(map):
        div = L.DomUtil.create('div', 'legend')

        // Loop through our density interrange and generate a label with a colored square for each interval
        for i in reversed(range(len(LABELS))):
            div.innerHTML += '<i style="background:' + getColor(BINS[i]) +\
              '"></i> ' + LABELS[i] + '<br>'
        return div
    
    legend.addTo(map)

    // Define suburb styles    
    def getGrossAnnualIncome(string=False):
        // Return the gross annual income currently selected.
        // If `string == True`, then stringify the number using 
        // `numToDollarStr()`. 
        result = $('#income').val() // Formatted string
        if not string:
            // Convert to integer
            result = numToDollarStr(result, 0, True)
        return result

    def getWeeklyRent(feature, ndigits=0, string=False):
        // Return the weekly rent for this au/feature based on
        // the currently selected property type and number of bedrooms.
        // If `string == True`, then stringify the number using 
        // `numToDollarStr()`.         
        // If the given feature has negative or undefined rent,
        // then return -1 (if `string == False`) or 
        // 'n/a' (if `string == True`).
        // Round rent to the ndigits decimal places.
        numBedrooms = $('#num-bedrooms').val()
        auName = feature.properties.AU_NAME 
        if rentByNbedroomsByAu[auName] != 'NA':
            rent = float(rentByNbedroomsByAu[auName][numBedrooms])
            if numBedrooms == "5+":
                result = rent/5
            else:
                result = rent/numBedrooms
        else:
            result = -1
        if result >= 0:
            if string:
                result = numToDollarStr(result, ndigits, False)
        else:
            if string:
                result = 'n/a'
            else:
                result = -1
        return result

    def getRentFraction(feature, ndigits=2, string=False):
        // Return the fraction of annual income spent on rent
        // for this suburb/feature rounded to `ndigits` decimal places
        // If the given feature has undefined rent and `string == True`,
        // then retun 'n/a'.
        result = 52*getWeeklyRent(feature, ndigits, False)/\
          getGrossAnnualIncome()
        if result >= 0:
            if string:
                result = Math.ceil(result*100) + '%'
            else:
                result = float(result.toFixed(ndigits))
        else:
            if string:
                result = 'n/a' 
        return result 

    def numToDollarStr(x, ndigits=0, inverse=False):
        // Convert the float `x` into a string with commas as
        // thousands separators and prepend a dollar sign.
        // If `inverse` is True, then assume `x` has the output format
        // mentioned above, and convert it back to an integer.
        // Round numbers to ``ndigits`` decimal places
        if not inverse:
            y = x.toFixed(ndigits)
            dollars, cents = y.split('.')
            // Insert separating commas
            dollars = dollars.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
            if ndigits:
                return '$' + dollars + '.' + cents 
            else:
                return '$' + dollars
        else:
            return int(x.replace('$', '').replace(',',''))

    def getColor(x):
        for (i, grade) in enumerate(BINS):
            if x <= grade:
                return COLORS[i]
    
    def style(feature):
        c = getColor(getRentFraction(feature))
        return {
          'fillColor': c,
          'fillOpacity': 0.7,
          'color': 'white',
          'weight': 1,
          'opacity': 1,
        }

    // Define suburb mouseover etc.
    def highlightFeature(e):
        layer = e.target
        feature = layer.feature
        layer.setStyle({
            'color': 'black',
        })
        if not L.Browser.ie and not L.Browser.opera:
            layer.bringToFront()
        popupContent = '<h4>' + feature.properties.AU_NAME + '</h4>' +\
            '<table>' +\
            '<tr><td>Weekly rent per bedroom</td><td>' +\
            getWeeklyRent(feature, 0, True) + '</td></tr>' +\
            '<tr><td>Fraction of annual income</td><td>' +\
            getRentFraction(feature, 2, True) + '</td></tr>' +\
            '</table>'
        layer.bindPopup(popupContent, {
            'offset': L.point(0, 120),
            'closeButton': false,
        }).openPopup()

    def resetHighlight(e):
        layer = e.target
        aus.resetStyle(layer)
        layer._map.closePopup()
            
    def zoomToFeature(e):
        map.fitBounds(e.target.getBounds())
    
    def onEachFeature(feature, layer):
        layer.on({
            'mouseover': highlightFeature,
            'mouseout': resetHighlight,
            'click': zoomToFeature,
        })

    // Add an income slider widget
    $(def():
        $( "#slider-vertical" ).slider({
            'orientation': 'vertical',
            'range': 'min',
            'min': 100,
            'max': 100000,
            'value': MEDIAN_ANNUAL_INCOME,
            'step': 100,
            'slide': def(event, ui): 
                // Update income display
                $('#income').val(numToDollarStr(ui.value))
                // Recolor aus
                aus.setStyle(style)
            ,
        })
        // Initialize slider 
        sv = $('#slider-vertical')
        $('#income').val(numToDollarStr(sv.slider('value')))
        // Label the median annual income point on slider
        min = sv.slider( "option", "min" )
        range = sv.slider( "option", "max" ) - min
        el = $('<label><span id="arrow">&larr;</span>' +\
          'Median annual income<br>of employed Aucklanders<br>(' +\
          numToDollarStr(MEDIAN_ANNUAL_INCOME) + ')</label>').css(
          'bottom', (MEDIAN_ANNUAL_INCOME/range*100) +'%');
        $("#slider-vertical").append(el)
    )
    
    // Add a number-of-bedrooms selector widget
    $(def():
        $("#num-bedrooms").selectable({
            'selected': def(event, ui):
                // Update nuber of bedrooms
                $('#num-bedrooms').val(ui.selected.id)
                // Recolor aus
                aus.setStyle(style)
        })
    )
    // Initialize selector
    item = $('#num-bedrooms li:eq(1)')
    item.addClass('ui-selected')
    $('#num-bedrooms').val(item[0].id)
 
makeMap()