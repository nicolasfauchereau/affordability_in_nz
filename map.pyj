import stdlib

def makeMap():    
    // Create map 
    map = L.map('map').setView([-36.84041, 174.73986], 12)

    // Get tiles from Github
    tilesURL = 'http://{s}.tiles.mapbox.com/v3/github.map-xgq2svrz/{z}/{x}/{y}.png'
    L.tileLayer(tilesURL).addTo(map)
    
    // Remove 'Leaflet' link from corner of map  
    map.attributionControl.setPrefix('')
    
    // Define data bins and labels.
    // Assume no-data entries map to nonpositive numbers.
    BINS = [0, 0.25, 0.5, 0.75, 10e9]
    LABELS = ['No data', '0&ndash;25% (affordable)', '26&ndash;50%', 
      '51&ndash;75%', '76%+']

    // Define color scheme using http://colorbrewer2.org/js/. 
    // Order colors least-to-most intense, but begin with gray, 
    // the no-data color.
    // 4-class Spectral:
    COLORS = reversed(['#d7191c', '#fdae61', '#abdda4', '#2b83ba', 'gray'])
    // 4-class OrRd:
    // COLORS = ['#969696', '#fef0d9', '#fdcc8a', '#fc8d59', '#d7301f']
    // 4-class YlGnBu:
    // COLORS = ['#969696', '#ffffcc', '#a1dab4', '#41b6c4', '#225ea8']
    MEDIAN_ANNUAL_INCOME = 575*52

    def getColor(x):
        for (i, grade) in enumerate(BINS):
            if x <= grade:
                return COLORS[i]

    // Add a legend to the map
    legend = L.control({position: 'bottomright'});
    legend.onAdd = def(map):
        div = L.DomUtil.create('div', 'info legend')

        // Loop through our density interrange and generate a label with a colored square for each interval
        for i in range(len(LABELS)):
            div.innerHTML += '<i style="background:' + getColor(BINS[i]) +\
              '"></i> ' + LABELS[i] + '<br>'
        return div

    legend.addTo(map)

    // Load polygons
    suburbs = L.geoJson().addTo(map) 
    $.getJSON("test.geojson", def(collection):
        suburbs.addData(collection)
        suburbs.setStyle(myStyle)
    )

    // Format gross annual income
    def int_to_dollar_str(x, inverse=False):
        // Convert the integer `x` into a string with commas as
        // thousands separators and prepend a dollar sign.
        // If `inverse` is True, then assume `x` has the output format
        // mentioned above, and convert it back to an integer.
        if not inverse:
            return '$' + x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        else:
            return int(x.replace('$', '').replace(',',''))

    // Define polygon styles. Calculate rent fractions herein.
    def myStyle(feature):
        // Get gross annual income from page, 
        // strip off the dollar sign and comma, and convert to an integer
        grossAnnualIncome = int_to_dollar_str($('#income').val(), inverse=True)
        // Get property type and number of bedrooms from page, 
        // and get corresponding rent from GeoJSON feature
        propertyType = $('#propertyType').val()
        numBedrooms = $('#numBedrooms').val()
        weeklyRent = feature.properties[propertyType][numBedrooms]
        console.log('grossAnnualIncome=', grossAnnualIncome)
        console.log('propertyType, numBedrooms, weeklyRent=', 
            propertyType, numBedrooms, weeklyRent)
        // Get fraction of annual income spent on rent
        f = 52*weeklyRent/grossAnnualIncome
        // Color the polygon accordingly
        c = getColor(f)
        return {
          'fillColor': c,
          'fillOpacity': 0.7,
          'color': c,
          'weight': 1,
          'opacity': 0.7,
        }


    // Add an income slider widget
    $(def():
        $( "#slider-vertical" ).slider({
            'orientation': 'vertical',
            'range': 'min',
            'min': 100,
            'max': 100000,
            'value': MEDIAN_ANNUAL_INCOME,
            'step': 100,
            'slide': def(event, ui): 
                // Update income display
                $('#income').val(int_to_dollar_str(ui.value))
                // Recolor suburbs
                suburbs.setStyle(myStyle)
            ,
        })
        // Initialize slider and add a label by the median annual income mark
        sv = $('#slider-vertical')
        $('#income').val(int_to_dollar_str(sv.slider('value')))
        min = sv.slider( "option", "min" )
        range = sv.slider( "option", "max" ) - min
        el = $('<label>&larr; NZ median annual income (' +\
          int_to_dollar_str(MEDIAN_ANNUAL_INCOME) + ')</label>').css(
          'bottom', (MEDIAN_ANNUAL_INCOME/range*100) +'%');
        // Add the element inside #slider
        $("#slider-vertical").append(el)
    )
    


    // Add a property type selector widget
    $(def():
        $("#propertyType").selectable({
            'selected': def(event, ui):
                // Update property type
                $('#propertyType').val(ui.selected.id)
                // Recolor suburbs
                suburbs.setStyle(myStyle)
        })
    )
    // Initialize selector
    item = $('#propertyType li:eq(1)')
    item.addClass('ui-selected')
    $('#propertyType').val(item[0].id)

    
    // Add a number-of-bedrooms selector widget
    $(def():
        $("#numBedrooms").selectable({
            'selected': def(event, ui):
                // Update nuber of bedrooms
                $('#numBedrooms').val(ui.selected.id)
                // Recolor suburbs
                suburbs.setStyle(myStyle)
        })
    )
    // Initialize selector
    item = $('#numBedrooms li:eq(1)')
    item.addClass('ui-selected')
    $('#numBedrooms').val(item[0].id)
 
makeMap()
